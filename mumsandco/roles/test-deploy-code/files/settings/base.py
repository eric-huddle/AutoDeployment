"""
Django settings for huddle project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

from os import path, mkdir
import re


# Build paths inside the project like this: path.join(BASE_DIR, ...)
BASE_DIR = path.normpath(path.join(path.dirname(__file__), '../..'))

APP_NAME = 'BASE'
# mode 0: normal operation
# mode 1: notify - web 200, api OK
# mode 2: warning - web 503, api OK
# mode 3: offline - web 503, api 503
MAINTENANCE_MODE = 0
MAINTENANCE_MODE_IGNORE_SUPERUSER = True
MAINTENANCE_MODE_REDIRECT_URL = 'http://we-are-updating.huddle.com.au'
MAINTENANCE_MODE_IGNORE_IP_ADDRESSES = [
    r'202\.172\.137\.122', # huddle office
    r'127\.0\.0\.1',     # local machine
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fzsz82p33@czojt@k@d8cj7n0&b%t4s&7_ufmdo3nm&)yvi()g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
DEEP_DEBUG = False
DEBUG_ALIAS = 'debug'

BASE_URL = 'huddle.com.au'

ALLOWED_HOSTS = [
    'admin.%s' % BASE_URL,
    'api.%s' % BASE_URL,
    BASE_URL,
    'admin.staging.%s' % BASE_URL,
    'api.staging.%s' % BASE_URL,
    'staging.%s' % BASE_URL,
    'localhost',
]

# No trailing slashes
FRONTEND_URL = "http://%s" % BASE_URL
API_URL = "http://api.%s" % BASE_URL
ADMIN_URL = "http://admin.%s" % BASE_URL
HELP_URL = "https://help.huddle.com.au/hc/en-gb"
FRONTEND_PREFIX = '/#'

SITE_NAME = 'Huddle'

CORS_ORIGIN_WHITELIST = []

# web rendered django page
META_DEFAULTS = {
    "TITLE": 'Huddle Insurance',
    "IMG": "/assets/images/open_graph.jpg",
    "DESCRIPTION": "Insurance just got interesting. Fair prices, Instant Claims&trade; and Profit for the Planet.",
    "CONTENT":     "<p>Insurance just got interesting. Fair prices, Instant Claims&trade; and Profit for the Planet.</p>",
}


SERVER_EMAIL = '%s <help@%s>' % (SITE_NAME, BASE_URL)
TEST_FROM_EMAIL = '%s <help+test@%s>' % (SITE_NAME, BASE_URL)
DEFAULT_FROM_EMAIL = SERVER_EMAIL

SUPPORT_EMAIL = 'help@huddle.com.au'
REPORTS_EMAIL = 'dan+huddle.reports@huddle.com.au'

PHONE_NUMBERS = {
    'DOMESTIC': '1300&nbsp;777&nbsp;200',
    'DOMESTIC_COMPACT': '1300777200',
    'INTL': '+61&nbsp;2&nbsp;8294&nbsp;7772',
    'INTL_COMPACT': '+61282947772',
}

COMPANY_INFO = {
    'NAME': 'Huddle Insurance',
    'NAME_OFFICIAL': 'Huddle Insurance Pty Ltd',
    'ABN': '23 166 949 444',
    'FSL': '451712',
}

EMAIL_HOST = 'smtp.mandrillapp.com'
EMAIL_PORT = '587'
EMAIL_HOST_USER = 'Huddle Money Pty Ltd'
EMAIL_HOST_PASSWORD = 'ljbYDaUuBBiKhuJHzHk8Hw'
EMAIL_USE_TLS = True

MANDRILL_API_KEY = "ljbYDaUuBBiKhuJHzHk8Hw"
EMAIL_BACKEND = "djrill.mail.backends.djrill.DjrillBackend"

# Feature flag (Turn abandoned quote emails on or off)
SEND_ABANDONED_QUOTE_EMAILS = True

GOOGLE_ANALYTICS_ACCOUNT = "UA-75289531-1"


# Application component definitions

PROJECT_APPS = [
    'core',
    'common',
    'geography',
    'prereg',
    'alerts',
    'discounts',
    'huddles',
    'news',
    'notes',
    'qanda',
    'cars',
    'quotes',
    'policies',
    'claims',
    'points',
    'payments',
    'notifications',
    'pds',
    'users',
]
LIBRARY_APPS = [
    'dal',
    'dal_select2',
    'suit',
    'ckeditor',
    'rest_framework',
    'rest_framework_swagger',
    'corsheaders',
    'django_extensions',
    'braintree',
    'import_export',
    'django_fsm',
    'django_fsm_log',
    'sorl.thumbnail',
    'mathfilters',
    'djrill',
    'super_inlines',
    'stdimage',
    'ipware',
    'fixture_magic',
]
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

INSTALLED_APPS = PROJECT_APPS + LIBRARY_APPS + DJANGO_APPS

MIDDLEWARE_CLASSES = [
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            path.join(BASE_DIR, 'backend/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


#######################
# Database
#######################

# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'huddlemoney',
        'USER': 'postgres',
    }
}


#######################
# Password validation
#######################

# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#######################
# Internationalization
#######################

# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-au'
TIME_ZONE = 'Australia/Sydney'
USE_I18N = True
USE_L10N = True
USE_TZ = True


#######################
# Insurance settings
#######################

PMC_USE_MIN_KMS = True
PMC_MIN_KMS = 20000


#######################
# Static files (CSS, JavaScript, Images)
#######################

# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_ROOT = path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

APPEND_SLASH = False

MAX_UPLOAD_SIZE = '5242880'


#######################
# Image dimensions.
#######################

# Used for min width/height validators.

STDIMAGE_SIZES = {
    'news': {
        'regular': {'width': 880, 'height': 480},
        'thumbnail': {'width': 286, 'height': 156},
        'icon': {'width': 60, 'height': 60},
    },
    'huddle': {
        'banner': {'width': 1500, 'height': 750},
        'card': {'width': 1000, 'height': 500},
        'logo': {'width': 315, 'height': 165},
    },
    'content': {
        'regular': {'width': 300, 'height': 300},
    },
    'claims': {
        'regular': {'width': 300, 'height': 120},
    },
    'verify': {
        'regular': {'width': 300, 'height': 140},
    }
}


SERVICES = {
    'motorweb': True,
    'car_quote': True,
    'travel_quote': True,
}


#######################
# Policy comms settings
#######################

# Do we send the policy PDFs and XML reports?
SEND_POLICY_COMMS = True

# Path the WKHTMLTOPDF system binary
WKHTMLTOPDF_BIN = '/usr/local/bin/wkhtmltopdf'

# used to render the policy PDF in settings
FILE_PATH_TO_TEMP_COI = path.join(BASE_DIR, 'temp/coi/temp-%s.pdf')

# Used to store DuckCreek XML responses
DIR_PATH_TO_TEMP_XML = path.join(BASE_DIR, 'temp/xml/')

# Store only the response if False.
DUCKCREEK_STORE_XML = {
    'RSP': True,
    'ZIP': False,
    'REQ': False,
}

# Customer user model
AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = (
    'users.auth.EmailBackend',
)

JWT_AUTHENTICATION = {

    # The length of time for which the token is valid
    'TIMEOUT_MINUTES': 60 * 36,

    # This specifies how often the keepalive event is triggered
    'KEEPALIVE_INTERVAL_MINUTES': 2,

    # The amount of time the user has to respond before they have been
    # considered timed out. Set to 0 or false to disable this feature, if you want
    # Idle to nothing but detect when a user is idle or not forever.
    'USER_TIMEOUT_DURATION_MINUTES': 0,

    # The idle timeout duration. After this amount of time passes without
    # the user performing an action that triggers one of the watched DOM events, the
    # user is considered idle. Note: Prior to v1.0, this method is called idleDuration.
    'USER_IDLE_DURATION_MINUTES': 10,
}

# SELECT-2 settings
SELECT2_JS = 'select2'
SELECT2_USE_BUNDLED_JQUERY = True

# Third party accounts

from accounts import *

# Load local settings

try:
    from local import *
except ImportError:
    pass
except IOError:
    pass

# Logging

# Define the path where log files are written
LOG_PATH = path.join(BASE_DIR, 'logs/')
if not path.isdir(LOG_PATH):
    mkdir(LOG_PATH)

# Ignore all default logging
LOGGING_CONFIG = None

# The default error level handler
LOGGING_DEFAULT_ERROR = {
    'django': {
        'handlers':['errorfile'],
        'propagate': True,
        'level':'ERROR',
    },
}

# Check if any loggers have been defined in local.py
try:
    LOGGERS.update(LOGGING_DEFAULT_ERROR)
except NameError:
    LOGGERS = LOGGING_DEFAULT_ERROR


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            # 'filename': path.join(LOG_PATH, 'django.log'),
            'formatter': 'verbose'
        },
        'errorfile': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': path.join(LOG_PATH, 'django.log'),
            'formatter': 'verbose'
        },
        'infofile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': path.join(LOG_PATH, 'app.log'),
            'formatter': 'verbose'
        },
        'debugfile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': path.join(LOG_PATH, 'debug.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 100,  # 100 mb
        },
    },
    'loggers': LOGGERS
}


# Braintree needs to be explicitly configured after loading account then local settings
from braintree import Environment, Configuration

Configuration.configure(
    Environment.Sandbox if BRAINTREE_MODE == 'sandbox' else Environment.Production,
    *BRAINTREE[BRAINTREE_MODE]
)

# Execute the logging configuration
import logging.config
logging.config.dictConfig(LOGGING)
